<html>
  <head>
    <title>Simple HTTP server sample for sanos</title>
    <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
    <link rel="stylesheet" type="text/css" href="/jbox.css">
  </head>
<body>
<p align="right"><a target="_top" href="index.htm">sanos home</a></p>
      
<h3>Simple HTTP server sample for sanos</h3>
<hr>
<p>&nbsp;</p>

<a href="../images/webserver.gif">
<img src="/images/webserver.gif" style="border-color:#C0C0C0; border-style:ridge; " align="right" width="360" height="200"></a>

<p>In order to demonstrate programming under <a href="/sanos/">sanos</a> I have 
made a simple web server demo. This sample is deliberately kept simple and 
lacks many important features you might want from a real web server. 
It is a single threaded server with only minimal error checking and it only 
handles the most basic aspects of the HTTP protocol. You can take a look at 
the <a href="source/include/httpd.h.html">httpd</a> server implementation in 
sanos for a more scalable and robust HTTP server implementation.</p>

<p>However, I hope this little sample web sever with only 200 lines of code 
demonstrates some of the the basic programming style used for programming sanos 
server applications. As can be  seen from the source code below, it is 
fairly standard C code. The code is very similar to other POSIX applications.
In fact, it can compile under Linux without any changes.</p>

<p>&nbsp;</p>
<h4>Compiling webserver.c under sanos using sanos SDK</h4>
<p>&nbsp;</p>

<p>The simplest way to try it out is to use the <a href="sdk.htm">sanos SDK</a> to 
compile webserver.c under sanos:</p>
<div class="fragment"><pre>
/$ cd /usr/src
/usr/src$ httpget www.jbox.dk /downloads/webserver.c webserver.c
Received 5808 bytes in 130 ms (44 KB/s)
/usr/src$ cc webserver.c
/usr/src$ webserver &amp;
[process 18 started]
HTTP server listening on port 80
/usr/src$ _
</pre></div>

<p>&nbsp;</p>
<h4>Compiling webserver.c for sanos using Visual Studio</h4>
<p>&nbsp;</p>

<p>You can use the <a href="programming.htm">Visual Studio wizard</a> to 
create a new sanos project with the webserver:</p>

<ul>
  <li>Create a new sanos project called 'webserver'.</li>
  <li>Set application type to user application (.exe).</li>
  <li>Select 'Use standard C library'.</li>
  <li>Select 'Create floppy disk boot image'.</li>
  <li>Select 'Enable network support'.</li>
</ul>

<p>Add a new source file (<a href="/downloads/webserver.c">webserver.c</a>) 
to the project and paste the code below into it. Select the Release 
configuration and build the webserver and image projects. You should now have 
a <font face="Courier New">webserver.flp</font> boot image file in your release 
directory. This boot image contains a copy of sanos as well as your web server.</p>

<p>Copy this image to a floppy disk using the mkfloppy tool and boot the computer 
from the floppy. After booting sanos the webserver program executes. If you 
point your browser to the machine you can browser around in the sanos file system 
on the floppy. You now have a simple standalone web server on a floppy.</p>

<p>&nbsp;</p>
<h4>Source code for webserver.c</h4>
<p>&nbsp;</p>
<div class="fragment"><pre>
//
// webserver.c
//
// Simple HTTP server sample for sanos
//

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;dirent.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;sys/socket.h&gt;

#define SERVER &quot;webserver/1.0&quot;
#define PROTOCOL &quot;HTTP/1.0&quot;
#define RFC1123FMT &quot;%a, %d %b %Y %H:%M:%S GMT&quot;
#define PORT 80

char *get_mime_type(char *name)
{
  char *ext = strrchr(name, '.');
  if (!ext) return NULL;
  if (strcmp(ext, &quot;.html&quot;) == 0 || strcmp(ext, &quot;.htm&quot;) == 0) return &quot;text/html&quot;;
  if (strcmp(ext, &quot;.jpg&quot;) == 0 || strcmp(ext, &quot;.jpeg&quot;) == 0) return &quot;image/jpeg&quot;;
  if (strcmp(ext, &quot;.gif&quot;) == 0) return &quot;image/gif&quot;;
  if (strcmp(ext, &quot;.png&quot;) == 0) return &quot;image/png&quot;;
  if (strcmp(ext, &quot;.css&quot;) == 0) return &quot;text/css&quot;;
  if (strcmp(ext, &quot;.au&quot;) == 0) return &quot;audio/basic&quot;;
  if (strcmp(ext, &quot;.wav&quot;) == 0) return &quot;audio/wav&quot;;
  if (strcmp(ext, &quot;.avi&quot;) == 0) return &quot;video/x-msvideo&quot;;
  if (strcmp(ext, &quot;.mpeg&quot;) == 0 || strcmp(ext, &quot;.mpg&quot;) == 0) return &quot;video/mpeg&quot;;
  if (strcmp(ext, &quot;.mp3&quot;) == 0) return &quot;audio/mpeg&quot;;
  return NULL;
}

void send_headers(FILE *f, int status, char *title, char *extra, char *mime, 
                  int length, time_t date)
{
  time_t now;
  char timebuf[128];

  fprintf(f, &quot;%s %d %s\r\n&quot;, PROTOCOL, status, title);
  fprintf(f, &quot;Server: %s\r\n&quot;, SERVER);
  now = time(NULL);
  strftime(timebuf, sizeof(timebuf), RFC1123FMT, gmtime(&amp;now));
  fprintf(f, &quot;Date: %s\r\n&quot;, timebuf);
  if (extra) fprintf(f, &quot;%s\r\n&quot;, extra);
  if (mime) fprintf(f, &quot;Content-Type: %s\r\n&quot;, mime);
  if (length &gt;= 0) fprintf(f, &quot;Content-Length: %d\r\n&quot;, length);
  if (date != -1)
  {
    strftime(timebuf, sizeof(timebuf), RFC1123FMT, gmtime(&amp;date));
    fprintf(f, &quot;Last-Modified: %s\r\n&quot;, timebuf);
  }
  fprintf(f, &quot;Connection: close\r\n&quot;);
  fprintf(f, &quot;\r\n&quot;);
}

void send_error(FILE *f, int status, char *title, char *extra, char *text)
{
  send_headers(f, status, title, extra, &quot;text/html&quot;, -1, -1);
  fprintf(f, &quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;%d %s&lt;/TITLE&gt;&lt;/HEAD&gt;\r\n&quot;, status, title);
  fprintf(f, &quot;&lt;BODY&gt;&lt;H4&gt;%d %s&lt;/H4&gt;\r\n&quot;, status, title);
  fprintf(f, &quot;%s\r\n&quot;, text);
  fprintf(f, &quot;&lt;/BODY&gt;&lt;/HTML&gt;\r\n&quot;);
}

void send_file(FILE *f, char *path, struct stat *statbuf)
{
  char data[4096];
  int n;

  FILE *file = fopen(path, &quot;r&quot;);
  if (!file)
    send_error(f, 403, &quot;Forbidden&quot;, NULL, &quot;Access denied.&quot;);
  else
  {
    int length = S_ISREG(statbuf-&gt;st_mode) ? statbuf-&gt;st_size : -1;
    send_headers(f, 200, &quot;OK&quot;, NULL, get_mime_type(path), length, statbuf-&gt;st_mtime);

    while ((n = fread(data, 1, sizeof(data), file)) &gt; 0) fwrite(data, 1, n, f);
    fclose(file);
  }
}

int process(FILE *f)
{
  char buf[4096];
  char *method;
  char *path;
  char *protocol;
  struct stat statbuf;
  char pathbuf[4096];
  int len;

  if (!fgets(buf, sizeof(buf), f)) return -1;
  printf(&quot;URL: %s&quot;, buf);

  method = strtok(buf, &quot; &quot;);
  path = strtok(NULL, &quot; &quot;);
  protocol = strtok(NULL, &quot;\r&quot;);
  if (!method || !path || !protocol) return -1;

  fseek(f, 0, SEEK_CUR); // Force change of stream direction

  if (strcasecmp(method, &quot;GET&quot;) != 0)
    send_error(f, 501, &quot;Not supported&quot;, NULL, &quot;Method is not supported.&quot;);
  else if (stat(path, &amp;statbuf) &lt; 0)
    send_error(f, 404, &quot;Not Found&quot;, NULL, &quot;File not found.&quot;);
  else if (S_ISDIR(statbuf.st_mode))
  {
    len = strlen(path);
    if (len == 0 || path[len - 1] != '/')
    {
      snprintf(pathbuf, sizeof(pathbuf), &quot;Location: %s/&quot;, path);
      send_error(f, 302, &quot;Found&quot;, pathbuf, &quot;Directories must end with a slash.&quot;);
    }
    else
    {
      snprintf(pathbuf, sizeof(pathbuf), &quot;%sindex.html&quot;, path);
      if (stat(pathbuf, &amp;statbuf) &gt;= 0)
        send_file(f, pathbuf, &amp;statbuf);
      else
      {
        DIR *dir;
        struct dirent *de;

        send_headers(f, 200, &quot;OK&quot;, NULL, &quot;text/html&quot;, -1, statbuf.st_mtime);
        fprintf(f, &quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Index of %s&lt;/TITLE&gt;&lt;/HEAD&gt;\r\n&lt;BODY&gt;&quot;, path);
        fprintf(f, &quot;&lt;H4&gt;Index of %s&lt;/H4&gt;\r\n&lt;PRE&gt;\n&quot;, path);
        fprintf(f, &quot;Name                             Last Modified              Size\r\n&quot;);
        fprintf(f, &quot;&lt;HR&gt;\r\n&quot;);
        if (len &gt; 1) fprintf(f, &quot;&lt;A HREF=\&quot;..\&quot;&gt;..&lt;/A&gt;\r\n&quot;);

        dir = opendir(path);
        while ((de = readdir(dir)) != NULL)
        {
          char timebuf[32];
          struct tm *tm;

          strcpy(pathbuf, path);
          strcat(pathbuf, de-&gt;d_name);

          stat(pathbuf, &amp;statbuf);
          tm = gmtime(&amp;statbuf.st_mtime);
          strftime(timebuf, sizeof(timebuf), &quot;%d-%b-%Y %H:%M:%S&quot;, tm);

          fprintf(f, &quot;&lt;A HREF=\&quot;%s%s\&quot;&gt;&quot;, de-&gt;d_name, S_ISDIR(statbuf.st_mode) ? &quot;/&quot; : &quot;&quot;);
          fprintf(f, &quot;%s%s&quot;, de-&gt;d_name, S_ISDIR(statbuf.st_mode) ? &quot;/&lt;/A&gt;&quot; : &quot;&lt;/A&gt; &quot;);
          if (strlen(de-&gtd_name) &lt; 32) fprintf(f, &quot;%*s&quot;, 32 - strlen(de-&gt;d_name), &quot;&quot;);
          if (S_ISDIR(statbuf.st_mode))
            fprintf(f, &quot;%s\r\n&quot;, timebuf);
          else
            fprintf(f, &quot;%s %10d\r\n&quot;, timebuf, statbuf.st_size);
        }
        closedir(dir);

        fprintf(f, &quot;&lt;/PRE&gt;\r\n&lt;HR&gt;\r\n&lt;ADDRESS&gt;%s&lt;/ADDRESS&gt;\r\n&lt;/BODY&gt;&lt;/HTML&gt;\r\n&quot;, SERVER);
      }
    }
  }
  else
    send_file(f, path, &amp;statbuf);

  return 0;
}

int main(int argc, char *argv[])
{
  int sock;
  struct sockaddr_in sin;

  sock = socket(AF_INET, SOCK_STREAM, 0);

  sin.sin_family = AF_INET;
  sin.sin_addr.s_addr = INADDR_ANY;
  sin.sin_port = htons(PORT);
  bind(sock, (struct sockaddr *) &amp;sin, sizeof(sin));

  listen(sock, 5);
  printf(&quot;HTTP server listening on port %d\n&quot;, PORT);

  while (1)
  {
    int s;
    FILE *f;

    s = accept(sock, NULL, NULL);
    if (s &lt; 0) break;

    f = fdopen(s, &quot;a+&quot;);
    process(f);
    fclose(f);
  }

  close(sock);
  return 0;
}
</pre></div>

</body>
</html>
